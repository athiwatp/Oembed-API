{
  "name": "q-xhr",
  "version": "0.1.1",
  "description": "XMLHttpRequest (ajax) using powerful Q promises",
  "author": {
    "name": "Nathan Black",
    "email": "nathan@nathanblack.org"
  },
  "main": "q-xhr.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/nathanboktae/q-xhr.git"
  },
  "bugs": {
    "url": "https://github.com/nathanboktae/q-xhr/issues"
  },
  "keywords": [
    "q",
    "xhr",
    "ajax",
    "promise",
    "promises",
    "deferred",
    "xmlhttprequest"
  ],
  "license": "MIT",
  "devDependencies": {
    "q": "latest",
    "mocha": "~1.14.0",
    "mocha-as-promised": "2.x.x",
    "chai": "~1.8.1",
    "chai-as-promised": "~4.1.0",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.5.0",
    "coffee-script": "~1.7.1",
    "expect.js": "~0.3.1",
    "es5-shim": "~2.3.0",
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.13",
    "grunt-saucelabs": "latest",
    "grunt-contrib-connect": "~0.7.1"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec && (grunt test || true)"
  },
  "testling": {
    "harness": "mocha-bdd",
    "files": "test/browser.tests.js",
    "browsers": [
      "ie/10",
      "chrome/latest",
      "firefox/latest",
      "iphone/latest",
      "ipad/latest",
      "android-browser/latest"
    ]
  },
  "readme": "## q-xhr: Do ajax with powerful [Q] promises\n### [Angular's $http service][$http] for us all\n\n[![Build Status](https://secure.travis-ci.org/nathanboktae/q-xhr.png?branch=master)](https://travis-ci.org/nathanboktae/q-xhr)\n\n[![SauceLabs Test Status](https://saucelabs.com/browser-matrix/nathanboktae.svg)](https://saucelabs.com/u/nathanboktae)\n\n### Why q-xhr and not $.ajax?\n\njQuery promises [have flaws](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/) that make them Promises/A+ compliant and [they are not going to be fixed](http://esdiscuss.org/topic/a-challenge-problem-for-promise-designers-was-re-futures#content-43). Q also has a lot more functions for promise manipluation and management.\n\nOnce you have a good MVC framework, taking a dependency on a 94kb minified (1.11) library just for `$.ajax` is alot, expecially when [Q] is 19k minified (probably half if you remove the node.js specifics). For example, [Knockout 3.0](http://knockoutjs.com) is 45k minified, and includes support all the way back to IE6 - and you can structure your code properly with it instead of creating spaghetti code coupled to the DOM.\n\n### Examples\n\nGet some JSON:\n```javascript\n  Q.xhr.get('/status').done(function(resp) {\n    console.log('status is ' + resp.data)\n  })\n```\n\nPost some JSON:\n\n```javascript\n  Q.xhr.post('/greet', {\n    say: 'hello'\n  }).then(function(resp) {\n    console.log('success!')\n  }, function(resp) {\n    console.log('request failed with status' + resp.status)\n  })\n```\n\nWith modern web applications in mind, `application/json` is the default mime type.\n\n### Differences from [Angular's $http][$http]\n\nOn the topic of MVC frameworks not needing jQuery, The [Angular] devs have adopted [Q] throught, and their [http service][$http] uses [Q]. q-xhr is a fork of that, with the following differences:\n\n- **No caching.** Caching is a [separate responsibility](http://blog.codinghorror.com/curlys-law-do-one-thing/) outside of doing ajax calls.\n- **No JSONP.** JSONP has all sorts of security flaws and limitations and causes lots of burden on both client side and server side code. Given that [XDomainRequest is available for IE8 and 9](http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx), and IE6 and 7 [are dead](http://gs.statcounter.com/#desktop-browser_version_partially_combined-ww-monthly-201302-201402), it should be avoided IMO. If you want XDomainRequest support (which jQuery never did), let me know or submit a pull request!\n- **Interceptors are applied in order.** I guess [angular] had some backward compatibility they were tied to do so something funky by applying request handlers in reverse but response handlers in order, but I don't have backward compatibility issues so it works like you'd expect.\n- **The default JSON transform is only applied if the response content is `application/json`**. [Angular] was doing something odd by sniffing all content via regex matching and then converting it to JSON if it matched. Why? Geez people set your `Content-Type` correctly already. Not to mention content sniffing leads to [security issues](http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx).\n- **Progress support**. Supply a progress listener function to recieve [ProgressEvent](https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent)s.\n\n### Installation\n\n#### Bower\n\n```\nbower install q-xhr\n```\n\n#### npm\n\n```\nnpm install q-xhr\n```\n\n[Q]: https://github.com/kriskowal/q\n[Angular]: http://angularjs.org/\n[$http]: http://docs.angularjs.org/api/ng/service/$http",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nathanboktae/q-xhr",
  "_id": "q-xhr@0.1.1",
  "dist": {
    "shasum": "d478756ff49967659efd34f4aca3a55fc7adfa7f"
  },
  "_from": "q-xhr@",
  "_resolved": "https://registry.npmjs.org/q-xhr/-/q-xhr-0.1.1.tgz"
}
